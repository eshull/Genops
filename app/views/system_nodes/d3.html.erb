<%= @system_node.hello %>
<%= @system_node.dot %>
<div id="graph" style="text-align: center;"></div>
<script src="http://d3js.org/d3.v3.min.js"></script>
<body>
  <svg id="visualisation" width="1000" height="500"></svg>
<script>
// var lineData = [{
//   x: 1,
//   y: 5
// }, {
//   x: 20,
//   y: 20
// }, {
//   x: 40,
//   y: 10
// }, {
//   x: 60,
//   y: 40
// }, {
//   x: 80,
//   y: 5
// }, {
//   x: 100,
//   y: 60
// }];
// var vis = d3.select('#visualisation'),
//     WIDTH = 1000,
//     HEIGHT = 500,
//     MARGINS = {
//       top: 20,
//       right: 20,
//       bottom: 20,
//       left: 50
//     },
//
//     // determine x range using .max d3 method
//     xRange = d3.scale.linear().range([MARGINS.left, WIDTH - MARGINS.right]).domain([d3.min(lineData, function(d) {
//       return d.x;
//     }), d3.max(lineData, function(d) {
//       return d.x;
//     })]),
//     // determine y range using .max d3 method
//     yRange = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([d3.min(lineData, function(d) {
//       return d.y;
//     }), d3.max(lineData, function(d) {
//       return d.y;
//     })]),
//
//
//     xAxis = d3.svg.axis()
//       .scale(xRange)
//       .tickSize(5)
//       .tickSubdivide(true),
//
//
//     yAxis = d3.svg.axis()
//       .scale(yRange)
//       .tickSize(5)
//       .orient('left')
//       .tickSubdivide(true);
//
// vis.append('svg:g')
//   .attr('class', 'x axis')
//   .attr('transform', 'translate(0,' + (HEIGHT - MARGINS.bottom) + ')')
//   .call(xAxis);
//
// vis.append('svg:g')
//   .attr('class', 'y axis')
//   .attr('transform', 'translate(' + (MARGINS.left) + ',0)')
//   .call(yAxis);
//
// // draw a straight line
//   var lineFunc = d3.svg.line()
//   .x(function(d) {
//     return xRange(d.x);
//   })
//   .y(function(d) {
//     return yRange(d.y);
//   })
//   .interpolate('linear');
//
// // set the d attribute of the SVG path to the coordinates returned from the line function. This is accomplished using the following code.
//   vis.append('svg:path')
//   .attr('d', lineFunc(lineData))
//   .attr('stroke', 'blue')
//   .attr('stroke-width', 2)
//   .attr('fill', 'none');



function InitChart() {

  var barData = [{
    'x': 1,
    'y': 5
  }, {
    'x': 20,
    'y': 20
  }, {
    'x': 40,
    'y': 10
  }, {
    'x': 60,
    'y': 40
  }, {
    'x': 80,
    'y': 5
  }, {
    'x': 100,
    'y': 60
  }];

  var vis = d3.select('#visualisation'),
    WIDTH = 1000,
    HEIGHT = 500,
    MARGINS = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 50
    },
    xRange = d3.scale.ordinal().rangeRoundBands([MARGINS.left, WIDTH - MARGINS.right], 0.1).domain(barData.map(function (d) {
      return d.x;
    })),


    yRange = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([0,
      d3.max(barData, function (d) {
        return d.y;
      })
    ]),

    xAxis = d3.svg.axis()
      .scale(xRange)
      .tickSize(5)
      .tickSubdivide(true),

    yAxis = d3.svg.axis()
      .scale(yRange)
      .tickSize(5)
      .orient("left")
      .tickSubdivide(true);


  vis.append('svg:g')
    .attr('class', 'x axis')
    .attr('transform', 'translate(0,' + (HEIGHT - MARGINS.bottom) + ')')
    .call(xAxis);

  vis.append('svg:g')
    .attr('class', 'y axis')
    .attr('transform', 'translate(' + (MARGINS.left) + ',0)')
    .call(yAxis);

  vis.selectAll('rect')
    .data(barData)
    .enter()
    .append('rect')
    .attr('x', function (d) {
      return xRange(d.x);
    })
    .attr('y', function (d) {
      return yRange(d.y);
    })
    .attr('width', xRange.rangeBand())
    .attr('height', function (d) {
      return ((HEIGHT - MARGINS.bottom) - yRange(d.y));
    })
    .attr('fill', 'grey')
    .on('mouseover',function(d){
      d3.select(this)
        .attr('fill','blue');
    })
    .on('mouseout',function(d){
      d3.select(this)
        .attr('fill','grey');
    });

}
InitChart();
</script>

</body>

<h1>Graph for <%= @system_node.name %></h1>
<div class="inspector">
  <div class="case-detail">
  </div>
  <h2>Status Bar</h2>
  <div class="bar-graph">
  </div>
</div>

<div id="graph" style="text-align: center;"></div>
<script>
console.log('<%= @system_node.hello %>');

// All of the dot code in a string
var dotSrc = `<%= @system_node.dot.html_safe %>`;

// the graph itself in a div
var graphviz = d3.select("#graph").graphviz();





function handleNodeClick() {
  function loadDetailPane(routeId) {

    $.getJSON("/system_nodes/" + routeId).done(renderDetailPane);
    console.log(dotElement);
    console.log("route id" + routeId);
  }

  function renderDetailPane(data) {
  //   var content = $('<div/>');
  //   var label1 = $('<h2/>');
  //   var label2 = $('<h3/>');
  //   var label3 = $('<h5/>');
  //   var editLink = $('<%= link_to graph_system_node_path(@system_node) %>');
  //   var editLink = $('<a href="/system_nodes/' + routeId + '/edit">edit</a>');
  //   console.log(data.settings);
  //
  //   // data = {name: "adfadf", updated_at:"adfadfa" ,
  //   // settings: {"mysettingnamex":"davalueofx"},
  //   // stats:{"mycount1":2, "someothercount":4}};
  //   label1.append(data.name)
  //   label2.append(data.id)
  //   label3.append(data.settings)
  //   label1.appendTo(content);
  //   label2.appendTo(content);
  //   label3.appendTo(content);
  //   editLink.appendTo(content);
  //
  //   for (var key in data.settings) {
  //     // skip loop if the property is from prototype
  //     if (!data.settings.hasOwnProperty(key)) continue;
  //     var obj = data.settings[key];
  //     for (var prop in obj) {
  //         // skip loop if the property is from prototype
  //         if(!obj.hasOwnProperty(prop)) continue;
  //           if(prop.toString() == "key" || prop.toString() == "value"){
  //           label3.append(prop + " : " + obj[prop] + '<br>')
  //           label3.appendTo(content)
  //           }else {
  //             console.log("wrong prop");
  //             console.log(prop.toString());
  //           }
  //     }
  // }
  // table view
  // document.getElementsByClassName('case-detail').innerHTML = "";
  // $('.case-detail').removeChild();
  var graphLink = $('<a href="/system_nodes/' + routeId + '/graph">Graph</a>');
  var editLink = $('<a href="/system_nodes/' + routeId + '/edit">Edit</a>');
  var content = $('<div/>');
  var table = $('<table/>');
  var tableRow = $('<tr/>');
  var tableData = $('<td/>');
  var label1 = $('<h2/>');
  var label2 = $('<h3/>');
  var label3 = $('<h5/>');

  console.log(data.settings);

  label1.append(data.name)
  // label2.append(data.id)
  label3.append(data.settings)
  label1.appendTo(content);
  // label2.appendTo(content);
  label3.appendTo(content);
  content.appendTo(".case-detail");
  table.appendTo(content);
  tableRow.appendTo(table);
    // tableData.appendTo(tableRow);
  graphLink.appendTo(content);
  editLink.appendTo(content);
    for (var key in data.settings) {
      // skip loop if the property is from prototype
      if (!data.settings.hasOwnProperty(key)) continue;
      var obj = data.settings[key];
      for (var prop in obj) {
          // skip loop if the property is from prototype
          if(!obj.hasOwnProperty(prop)) continue;
            if(prop.toString() == "key" || prop.toString() == "value"){
            // label3.append(prop + " : " + obj[prop] + '<br>')
            // table.append()
            var td = $('<tr>' + '<td>' + obj[prop] + '</td>' + '</tr>')
            td.appendTo(table)
            // tableRow.html('<td>' + prop + '</td>' + '<td>' + obj[prop] + '</td>')
            console.log("loop counter");

            // tableRow.append('<td>' + obj[prop] + '</td>' + '</tr>')
            // table.append('</tr>')

            // tableData.append(obj[prop])
            // tableData.appendTo(table)
            }else {
              console.log("wrong prop");
              console.log(prop.toString());
            }
      }
    }
  $('.case-detail').empty();
  $('.case-detail').append(content);

  }

  // On click select all titles of this
    var title = d3.select(this).selectAll('title').text().trim();
  // On click select all text of this
    var text = d3.select(this).selectAll('text').text();
  // On click select id of this
    var id = d3.select(this).attr('id');
  // On click select class of this
    var class1 = d3.select(this).attr('class');
  // Replace titles with arrows
    dotElement = title.replace('->',' -> ');

    // Console log current element id, class, title, text and dotElement
    console.log('Element id="%s" class="%s" title="%s" text="%s" dotElement="%s"', id, class1, title, text, dotElement);

    console.log('NODE ID IS: id="%s"', id);

    // var node = (this).getBoundingClientRect()
    // var positionLeft = node.left - 180;
    // var positionTop = node.top;
    // console.log("Left position here " + node.left);
    // console.log("Top position here " + node.top);
    //
    // $('body').append('<div id="close" class="graph-settings" style="left:'+ positionLeft + 'px; top:' + positionTop + 'px;"><a>x</a></div>')

    var routeId = dotElement.replace('node_','');
console.log("fancy" + routeId);

  function barGraph() {

    var dataImport = [3, 4, 39, 15, 4, 65, 15, 20, 19, 5, 7, 9, 31, 10];

    var daysCounted = dataImport.map(function(element) {
      return element = dataImport.length;
    });

    var svgContainer = d3.select(".bar-graph").append("svg")
                                        .attr("width", 250)
                                        .attr("height", 450)

    var rectangles = svgContainer.selectAll("rect")
                                 .data(dataImport)
                                 .enter()
                                 .append("rect");
    var y = (-10)
    var rectangleAttributes = rectangles
                              .attr("x", function (d) { return 20; })
                              .attr("y", function (d) { return y = y + 30; })
                              .attr("height", function (d) { return 25; })
                              .attr("width", function (d) { return d * 3; })
                              .style("fill", function(d) {
                                  if (d > 60) {return '#fe482f'}
                                  else if (d > 30 && d < 59) {return '#ff7b11'}
                                  else 	{ return '#00bcd6' }
                              ;})

                          var xscale = d3.scaleLinear()
                             .domain([0, d3.max(dataImport)])
                             .range([30, 250]);

                          var yscale = d3.scaleLinear()
                             .domain([0, d3.max(daysCounted)])
                             // y axis [height, position]
                             .range([425, 0]);
                          var x_axis = d3.axisTop()
                              .scale(xscale);
                          var y_axis = d3.axisLeft()
                              .scale(yscale);
                          svgContainer.append("g")
                              .attr("transform", "translate(20, 30)")
                              .call(y_axis);
                              var xAxisTranslate = 20;
                          svgContainer.append("g")
                             .attr("transform", "translate(-10, " + xAxisTranslate  +")")
                             .call(x_axis)

  }
    // $('a').on('click', function(){
    //   $(this).closest("#close").remove();
    // });

    loadDetailPane(routeId);
    $('.bar-graph').empty();
    barGraph();
}

// function to render dot code using dotSrc
function render(dotSrc) {
    console.log('DOT source =', dotSrc);

    // Split incoming string by line
    var dotSrcLines = dotSrc.split('\n');

    // Transition animation
    transition1 = d3.transition()
        .delay(100)
        .duration(1000);

    // applying transitions to the graph
    graphviz
        .transition(transition1)
        .renderDot(dotSrc);

    // Grabbing all nodes and edges
    nodes = d3.selectAll('.node,.edge');

    // On click function for node change
    nodes.on("click", handleNodeClick);
}
render(dotSrc);

</script>
